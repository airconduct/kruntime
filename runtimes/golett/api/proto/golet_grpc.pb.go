// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: golet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoletClient is the client API for Golet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoletClient interface {
	Invoke(ctx context.Context, in *RemoteMessage, opts ...grpc.CallOption) (*RemoteMessage, error)
	Load(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*LoadResponse, error)
	Unload(ctx context.Context, in *UnloadRequest, opts ...grpc.CallOption) (*UnloadResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type goletClient struct {
	cc grpc.ClientConnInterface
}

func NewGoletClient(cc grpc.ClientConnInterface) GoletClient {
	return &goletClient{cc}
}

func (c *goletClient) Invoke(ctx context.Context, in *RemoteMessage, opts ...grpc.CallOption) (*RemoteMessage, error) {
	out := new(RemoteMessage)
	err := c.cc.Invoke(ctx, "/proto.Golet/Invoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goletClient) Load(ctx context.Context, in *LoadRequest, opts ...grpc.CallOption) (*LoadResponse, error) {
	out := new(LoadResponse)
	err := c.cc.Invoke(ctx, "/proto.Golet/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goletClient) Unload(ctx context.Context, in *UnloadRequest, opts ...grpc.CallOption) (*UnloadResponse, error) {
	out := new(UnloadResponse)
	err := c.cc.Invoke(ctx, "/proto.Golet/Unload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goletClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/proto.Golet/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoletServer is the server API for Golet service.
// All implementations must embed UnimplementedGoletServer
// for forward compatibility
type GoletServer interface {
	Invoke(context.Context, *RemoteMessage) (*RemoteMessage, error)
	Load(context.Context, *LoadRequest) (*LoadResponse, error)
	Unload(context.Context, *UnloadRequest) (*UnloadResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedGoletServer()
}

// UnimplementedGoletServer must be embedded to have forward compatible implementations.
type UnimplementedGoletServer struct {
}

func (UnimplementedGoletServer) Invoke(context.Context, *RemoteMessage) (*RemoteMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}
func (UnimplementedGoletServer) Load(context.Context, *LoadRequest) (*LoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedGoletServer) Unload(context.Context, *UnloadRequest) (*UnloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unload not implemented")
}
func (UnimplementedGoletServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGoletServer) mustEmbedUnimplementedGoletServer() {}

// UnsafeGoletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoletServer will
// result in compilation errors.
type UnsafeGoletServer interface {
	mustEmbedUnimplementedGoletServer()
}

func RegisterGoletServer(s grpc.ServiceRegistrar, srv GoletServer) {
	s.RegisterService(&Golet_ServiceDesc, srv)
}

func _Golet_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoletServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Golet/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoletServer).Invoke(ctx, req.(*RemoteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Golet_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoletServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Golet/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoletServer).Load(ctx, req.(*LoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Golet_Unload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoletServer).Unload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Golet/Unload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoletServer).Unload(ctx, req.(*UnloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Golet_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoletServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Golet/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoletServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Golet_ServiceDesc is the grpc.ServiceDesc for Golet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Golet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Golet",
	HandlerType: (*GoletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _Golet_Invoke_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _Golet_Load_Handler,
		},
		{
			MethodName: "Unload",
			Handler:    _Golet_Unload_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Golet_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golet.proto",
}
